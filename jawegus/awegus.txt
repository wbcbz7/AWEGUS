alright, here is some hardcore shit

  AWEGUS - Gravis Ultrasound "emulator" for Sound Blaster AWE32/64 v.0.20beta
           absolutely copyleft (cl) 2o22-2o23 Artem Vasilev - wbcbz7

 1. wtf?
 
   idk. absolutely at your own risk. if it crashes, you're screwed.

 2. "features"

 common:
  - classic GUS (GF1) wavetable feature set only
  - 8/16bit samples support (default is 8bit only to save sound RAM, see below)
  - forward loops are supported, one-shots are emulated as tiny 1-sample loop
    (may cause high pitched noise). backward playback and rollover are not
    supported, ping-pong loops are treated as forward.
  - likewise, clicks can occur on loop end (morphing into buzzes on very short
    loops, like in chiptunes) due to the fact EMU8000 needs more samples at the
    loop end for 3-point interpolation (GF1 uses linear 2-point)
  - IRQ emualtion supports Timer IRQ and can use SB16 dummy playback, COM1 or
    COM2 interrupts as timing source. DMA Terminal Count IRQ coming soon :)
    wavetable/volume ramp IRQs are not supported
  - experimental DMA upload emulation
  - Timer Data (2x9) and Index (2xA) readback are also emulated to pass some
    more detection checks
  - volume ramping is "emulated" by instant slewing to ramp start/end volume,
    depending on ramp direction. that will definitely cause clicks in playback
    of course it's possible to emulate ramps via EMU8000 envelope generators,
    but this also require logarithmic pitch to be used instead of linear delta
    again, not impossible but will complicate and slow emulation a bit.
  - all channels are processed at full 44100 Hz
  - max. 28 (or 30 channels with --nofm option) are supported. GUS channels 
    above that limit are dropped.
  - sample frequencies above 176 kHz are silently dropped (EMU8000 limitation)

 AWEGUS is done in two distinct versions:
  - Jemm-based version (JAWEGUS)
    uses Jemm's memory manager I/O trapping support. runs in ring0 protected
    move, having full control over V86 session.
    comaptible with real-mode V86-friendly applications only
    DPMI-capable protected mode apps should work if DPMI server will able to 
    utilize and reflect Jemm's I/O traps. afaik there is yet to write one ;)
    flat real (aka unreal) mode is not supported since V86 mode forces all
    segment limits to 64k - use I/O breakpoint version for those.

  - I/O Breakpoint version (BPAWEGUS) - NOT IMPLEMENTED YET
    using 386+ hardware debugging features and I/O breakpoint support intro-
    duced with Debug Extensions (DE) to trap I/O ports while running entirely
    in real mode
    intended for real mode apps that are incompatible with V86 mode, i.e.
    running in flat real (aka unreal) mode. protected mode is not supported.

    note that due to limited amount of hardware breakpoints (only 4 32-bit!),
    DMA emulation is severly limited and not guranteed to work correctly.
    IRQ emulation works best if emulator IRQ is equal to emulated GUS IRQ,
    otherwise applications may mask emulator IRQ out and cause IRQs to stop.

 3. system requirements:
 
 Jemm-based version:
  - 386 or higher CPU, fast 486 or Pentium recommended due to V86 mode and I/O
    trap handling overhead.
  - ca. 30-40kb of extended memory

 I/O breakpoint version:
  - x86 CPU with Debugging Extensions (DE) support.
    Pentium, AMD K5 and later CPUs do support DE, consult CPUID for ohters.
  - ca. 15-20 kb of conventional/UMB and 30-40kb of extended memory
  - no V86 memory managers, debuggers and monitors present. AWEGUS needs 
    direct access to control and debug registers, and most V86 monitors do not
    provide it or virtualize in the way that makes emulation impossible.
    If you're running Jemm memory manager, use native Jemm version instead.
    System tools that make use of x86 debugging features may interfere with
    AWEGUS operation, so make sure they're unloaded as well.

 common:
  - Sound Blaster AWE32/64 with at least 2 MB of sound DRAM
    NOTE: it will NOT work on 512 KB configurations, due to insufficient
    amount of sound memory for emulation (well, it can emulate 256KB GUS with
    8bit only samples, but is that worth it?)
    with 2 MB, you can emulate a 1MB GUS for 8bit only, 512KB for 8/16bit;
    and full 1 MB model if 4 MB of memory or more is installed.

 4. usage
  a. set your BLASTER and ULTRASND environment variables, example:
      SET BLASTER=A220 I5 D1 H5 E620 P330
                  ^^^^ ^^ ^^    ^^^^ EMU8000 base - required!
                  ^^^^ ^^ ^^ SB16 resources - can be used for IRQ emulation
      SET ULTRASND=240,3,3,7,7
                    ^  ^   ^ emulated IRQ
                    ^   emulated DMA channel
                    emulated base address

  b. Jemm-based version only:
     run Jemm, either as device driver or from command line:
      DEVICE=C:\DOS\JEMM\JEMM386.EXE [parameters..]
       or
      JEMM386.EXE LOAD

      you can use JEMMEX (JEMM386 + XMS driver) instead of JEMM386, consult
      Jemm's docs for more info.

     I/O Breakpoint verison only:
      make sure no V86 applications are active now! XMS memory managers
      (like HIMEM.SYS) or hardware UMB providers (UMBPCI, etc.) are ok

  c. run AWE32/64 drivers. both Creative's original and UNISOUND will work.
  d. load AWEGUS:
      JLOAD JAWEGUS.EXE [parameters...]         // jemm-based version
      BPAWEGUS.EXE [parameters...]              // i/o breakpoint version

  e. run ULTRINIT from GUS driver package to initilaize virtual GUS (optional)
  f. try any GUS software. maybe it'll even work :)
  g. when you're done, you can remove emulator by running:
      JLOAD -U JAWEGUS.EXE                      // jemm-based version
      BPAWEGUS.EXE -U                           // i/o breakpoint version

    oh, and by the way, both SB16 and FM parts will still work alongside

 5. command line switches
    -?, -h, --help 
        - show help screen
    -w, --16bit
        - enable 16bit samples support
          note it requires 1.5x more sound RAM, so 4 MB or more is recommended
          will work on 2 MB, but GUS RAM size is limited to 512 kB
          also increasing uploading time, because the emulation has to upload
          same sample twice (first 8 bit expanded to 16, then as full 16 bit)
    -m, --mono  
        - force mono panning
    -s, --slowdram (NOTE: ENABLED BY DEFAULT DUE TO SAMPLE CORRUPTION)
        - disable DRAM write position autoincrement. affects both 3x7 and DMA
          enable this if you have encountered issues with ISA memory refresh
          or sample data corruption
    -f  --nofm
        - disable FM passthrough and allocate channels 31/32 for DRAM access
          increases emulated GUS channels pool from 28 to 30 channels
    -g[x], --gain=[x]
        - apply volume gain in 0.375 dB units (16 - +6db, 32 - +12db, etc),
          levels above 0 db (0xFFF for GF1 volume) are clamped to 0 db
          useful for some players and demos having too quiet sound
    -i[x], --irq=[x]
        - enable IRQ emulation, x:
            0 - use SB16 in dummy playback mode (default)
            1 - use COM1 at 0x3F8/IRQ4
            2 - use COM2 at 0x2F8/IRQ3
          see "IRQ emulation" section below for more info
    -d, --dma
        - enable DMA emulation (HIGHLY EXPERIMENTAL!)
        --irqhack
        - ignore non-zero IRQ status (2x6) and always send an IRQ (HACK!)
          effective with --irq switch only
    --mem=[x]
        - limit GUS ram size to x kb, rounded down to power of two (256-1024k)
 
 6. IRQ emulation
    some games and demos use GUS timer IRQs to control playback. since EMU8000
    does not have its own timer, we have to use alternative timing sources.

    running AWEGUS with --irq=[x] switch enables IRQ emulation, where x:

      x = 0: SB16 in dummy playback mode
        speaks of itself :) play silent 8bit sample over and over at 5kHz
        uses regular SB port, IRQ and DMA resources from BLASTER variable
        of course, you're not able to use SB16 in DOS applications then.
        (NOTE: BROKEN IN THIS RELEASE)
      x = 1,2 : use COM1/COM2 as timing source
        abuse 8250 UART to send null character at arbitrary baud rate, and
        use transmit buffer empty IRQ as timing source. may not work in some
        cases like integrated modem/laptop UARTs. make sure you have nothing
        connected to selected COM port, or unexpected things could happen :)

    if --irq switch is omitted, timer emulation is faked in the way it sends
    IRQ the moment timer is started, to pass GUS detection checks.

    since Jemm doesn't have any IRQ virtualization support, make sure you have
    only one device using same IRQ, and if possible, set GUS emulated IRQ line
    to emulator timer IRQ: i.e. if have SB16 at IRQ5, it's best to set GUS IRQ
    also to 5. Moreover, V86 task may lose emulated GUS interrupts during 
    virtual IF flag cleared period, as it's unsafe to run a virtual IRQ if
    they are disabled (although Jemm reflects virtual IF to real IF, so IRQs
    should not have been missed, needs checking and testing!)

    note that only timer IRQs are emulated (DMA terminal count coming soon),
    wavetable/volume ramp IRQs are ignored and never signalled.

 7. DMA emulation (EXPERIMENTAL)
    alas, Jemm doesn't provide DMA virtualization API either, so DMA emulation
    is done by monitoring GF1 DMA control registers. if DMA transfer is started
    AWEGUS reads 8237 and DMA page registers to get buffer address and size.
    then, is simply copies data to EMU8000 DRAM and signals DMA completion (and 
    optionally an IRQ). simple yet enough for most GUS players.
    circular buffer playback perhaps will not work (it needs wave IRQs anyway)

 7. more stuff
    right now seems to work well with apps using GusPlay by Cascada, other
    players may still bug a bit or break completely. see BUGS.md

    thanks to Peter De Wachter for ADLIPT sources! without them this little
    emu will not be possible (or rather i won't be bothered making it :)

 7. license
    alright (broken formatting incoming):

Copyright (c) 2022-2023 Artem Vasilev - wbcbz7

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

 -- wbcbz7 24.11.2o22
 
     