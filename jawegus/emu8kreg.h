#pragma once

// EMU8000 register definitions

enum {
    EMU8K_REG_SHIFT     = 5,        // lower 5 bits are channel number
    EMU8K_REG_ADR_SHIFT = 8,

    // register address defines
    EMU8K_REG_000       = (0 << EMU8K_REG_ADR_SHIFT), // +000 (620, 640, etc..)
    EMU8K_REG_002       = (1 << EMU8K_REG_ADR_SHIFT), // +002 (622, 642, etc..)
    EMU8K_REG_400       = (2 << EMU8K_REG_ADR_SHIFT), // +400 (820, 840, etc..)
    EMU8K_REG_402       = (3 << EMU8K_REG_ADR_SHIFT), // +402 (822, 842, etc..)
    EMU8K_REG_800       = (4 << EMU8K_REG_ADR_SHIFT), // +800 (A20, A40, etc..)
    EMU8K_REG_802       = (5 << EMU8K_REG_ADR_SHIFT), // +802 (A22, A42, etc..)
    EMU8K_REG_MASK      = (7 << EMU8K_REG_ADR_SHIFT),
    EMU8K_REG_DWORD     = (8 << EMU8K_REG_ADR_SHIFT), // send dword data

    // global regs
    // low 8 bits are written to EMU8K_REG_POINTER and high 8 bits describe data port and size
    
    EMU8K_REG_POINTER   = EMU8K_REG_802,                            // one register at +0x802
    EMU8K_REG_INIT1     = EMU8K_REG_400 | (2 << EMU8K_REG_SHIFT),
    EMU8K_REG_INIT2     = EMU8K_REG_402 | (2 << EMU8K_REG_SHIFT),
    EMU8K_REG_INIT3     = EMU8K_REG_400 | (3 << EMU8K_REG_SHIFT),
    EMU8K_REG_INIT4     = EMU8K_REG_402 | (3 << EMU8K_REG_SHIFT),
    EMU8K_REG_HWCF4     = EMU8K_REG_400 | (1 << EMU8K_REG_SHIFT) | 9  | EMU8K_REG_DWORD,
    EMU8K_REG_HWCF5     = EMU8K_REG_400 | (1 << EMU8K_REG_SHIFT) | 10 | EMU8K_REG_DWORD,
    EMU8K_REG_HWCF6     = EMU8K_REG_400 | (1 << EMU8K_REG_SHIFT) | 13 | EMU8K_REG_DWORD,
    EMU8K_REG_SMALR     = EMU8K_REG_400 | (1 << EMU8K_REG_SHIFT) | 20 | EMU8K_REG_DWORD,
    EMU8K_REG_SMARR     = EMU8K_REG_400 | (1 << EMU8K_REG_SHIFT) | 21 | EMU8K_REG_DWORD,
    EMU8K_REG_SMALW     = EMU8K_REG_400 | (1 << EMU8K_REG_SHIFT) | 22 | EMU8K_REG_DWORD,
    EMU8K_REG_SMARW     = EMU8K_REG_400 | (1 << EMU8K_REG_SHIFT) | 23 | EMU8K_REG_DWORD,
    EMU8K_REG_SMALD     = EMU8K_REG_400 | (1 << EMU8K_REG_SHIFT) | 26,
    EMU8K_REG_SMARD     = EMU8K_REG_402 | (1 << EMU8K_REG_SHIFT) | 26,
    EMU8K_REG_WC        = EMU8K_REG_402 | (1 << EMU8K_REG_SHIFT) | 27,
    EMU8K_REG_HWCF1     = EMU8K_REG_402 | (1 << EMU8K_REG_SHIFT) | 29,
    EMU8K_REG_HWCF2     = EMU8K_REG_402 | (1 << EMU8K_REG_SHIFT) | 30,
    EMU8K_REG_HWCF3     = EMU8K_REG_402 | (1 << EMU8K_REG_SHIFT) | 31,

    // sound generator
    EMU8K_REG_CPF       = EMU8K_REG_000 | (0 << EMU8K_REG_SHIFT) | EMU8K_REG_DWORD,
    EMU8K_REG_PTRX      = EMU8K_REG_000 | (1 << EMU8K_REG_SHIFT) | EMU8K_REG_DWORD,
    EMU8K_REG_CVCF      = EMU8K_REG_000 | (2 << EMU8K_REG_SHIFT) | EMU8K_REG_DWORD,
    EMU8K_REG_VTFT      = EMU8K_REG_000 | (3 << EMU8K_REG_SHIFT) | EMU8K_REG_DWORD,
    EMU8K_REG_PSST      = EMU8K_REG_000 | (6 << EMU8K_REG_SHIFT) | EMU8K_REG_DWORD,
    EMU8K_REG_CSL       = EMU8K_REG_000 | (7 << EMU8K_REG_SHIFT) | EMU8K_REG_DWORD,
    EMU8K_REG_CCCA      = EMU8K_REG_400 | (0 << EMU8K_REG_SHIFT) | EMU8K_REG_DWORD,

    // envelope generator
    EMU8K_REG_ENVVOL    = EMU8K_REG_400 | (4 << EMU8K_REG_SHIFT),
    EMU8K_REG_DCYSUSV   = EMU8K_REG_400 | (5 << EMU8K_REG_SHIFT),
    EMU8K_REG_ENVVAL    = EMU8K_REG_400 | (6 << EMU8K_REG_SHIFT),
    EMU8K_REG_DCYSUS    = EMU8K_REG_400 | (7 << EMU8K_REG_SHIFT),
    EMU8K_REG_ATKHLDV   = EMU8K_REG_402 | (4 << EMU8K_REG_SHIFT),
    EMU8K_REG_LFO1VAL   = EMU8K_REG_402 | (5 << EMU8K_REG_SHIFT),
    EMU8K_REG_ATKHLD    = EMU8K_REG_402 | (6 << EMU8K_REG_SHIFT),
    EMU8K_REG_LFO2VAL   = EMU8K_REG_402 | (7 << EMU8K_REG_SHIFT),
    EMU8K_REG_IP        = EMU8K_REG_800 | (0 << EMU8K_REG_SHIFT),
    EMU8K_REG_IFATN     = EMU8K_REG_800 | (1 << EMU8K_REG_SHIFT),
    EMU8K_REG_PEFE      = EMU8K_REG_800 | (2 << EMU8K_REG_SHIFT),
    EMU8K_REG_FMMOD     = EMU8K_REG_800 | (3 << EMU8K_REG_SHIFT),
    EMU8K_REG_TREMFREQ  = EMU8K_REG_800 | (4 << EMU8K_REG_SHIFT),
    EMU8K_REG_FM2FRQ2   = EMU8K_REG_800 | (5 << EMU8K_REG_SHIFT),

    // memory offsets in words
    EMU8K_ROM_OFFSET    = 0,
    EMU8K_DRAM_OFFSET   = 0x200000,
    EMU8K_FM_OFFSET     = 0xFFFFE0,
};
